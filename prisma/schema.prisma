// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

generator trpc {
    provider        = "prisma-trpc-generator"
    withZod         = true
    withMiddleware  = false
    withShield      = false
    contextPath     = "../src/context"
    trpcOptionsPath = "../src/trpcOptions"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    drivers       Driver[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Car {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    brand     String
    model     String
    year      Int
    color     String
    image     String
    available Boolean   @default(true)
    drivers   Driver[]
    works     Work[]
    Expense   Expense[]
}

model Driver {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    userId    String
    name      String
    age       Int
    image     String
    cars      Car[]
    works     Work[]
    Expense   Expense[]
    users     User[]
}

///kmInÄ±t kmLast
model Work {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    car       Car      @relation(fields: [carId], references: [id])
    carId     Int
    driver    Driver   @relation(fields: [driverId], references: [id])
    driverId  Int
    startDate DateTime
    endDate   DateTime
    location  String
    kmInit    Float
    kmLast    Float
    distance  Float
    cost      Float
}

model Expense {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    car         Car      @relation(fields: [carId], references: [id])
    carId       Int
    driver      Driver   @relation(fields: [driverId], references: [id])
    driverId    Int
    cost        Float
    description String
}
